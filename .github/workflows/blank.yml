name: Find New Implementation Addresses

on:
  push:
    branches:
      - main # This workflow will run on pushes to the 'main' branch.
              # Adjust 'main' to your actual branch name if different (e.g., 'master', 'develop').

jobs:
  check_new_addresses:
    runs-on: ubuntu-latest # The type of runner the job will execute on.

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          # Fetch at least two commits. This is crucial because we need to compare
          # the current 'state.json' with its version in the immediately preceding commit (HEAD~1).
          fetch-depth: 2

      - name: Install jq
        # jq is a lightweight and flexible command-line JSON processor.
        # It's essential for parsing and comparing the JSON files.
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Find and Echo New Implementation Addresses
        run: |
          echo "--- Checking for new implementation addresses in state.json ---"

          # Get the content of state.json from the previous commit (HEAD~1).
          # If state.json didn't exist in HEAD~1 (e.g., it's the first commit where it's added),
          # `git show` will fail. We use `|| echo "{}"` to provide an empty JSON object in that case.
          # This ensures that all addresses in the current state.json will be considered "new"
          # if the file was just created.
          PREV_STATE_JSON_CONTENT=$(git show HEAD~1:state.json 2>/dev/null || echo "{}")
          echo "$PREV_STATE_JSON_CONTENT" > prev_state.json

          # Define the networks we expect in state.json.
          # You can make this dynamic by parsing the keys from the current state.json if your network names can vary.
          NETWORKS=("Holesky" "Sepolia" "Hoodi")

          FOUND_ANY_NEW_ADDRESSES=false # Flag to track if any new addresses were found across all networks.

          for NETWORK in "${NETWORKS[@]}"; do
              NEW_ADDRESSES_FOR_NETWORK="" # To store new addresses for the current network

              # Get all implementation addresses for the current network from the CURRENT state.json.
              # `2>/dev/null || echo ""` handles cases where the network or contracts array might be missing.
              CURRENT_ADDRS_JQ=$(jq -r --arg net "$NETWORK" '.[$net].contracts[].implementationAddress' state.json 2>/dev/null || echo "")

              # Only proceed if the current network has any addresses.
              if [ -n "$CURRENT_ADDRS_JQ" ]; then
                  # Read each address from the CURRENT_ADDRS_JQ output line by line.
                  echo "$CURRENT_ADDRS_JQ" | while IFS= read -r CURRENT_ADDR; do
                      # Check if the CURRENT_ADDR exists in the PREVIOUS state.json for this NETWORK.
                      # We use `jq` to filter the previous contracts and see if the current address matches any.
                      # `type == "array"` check makes it robust if `contracts` key is missing or not an array.
                      # If `jq` finds a match, it will output the address. If not, it outputs nothing.
                      IS_EXISTING_IN_PREV=$(jq -r --arg net "$NETWORK" --arg addr "$CURRENT_ADDR" \
                                               '. | select(.[$net].contracts | type == "array") | .[$net].contracts[].implementationAddress | select(. == $addr)' \
                                               prev_state.json 2>/dev/null || echo "")

                      # If IS_EXISTING_IN_PREV is empty, it means the current address was NOT found in the previous state.
                      if [ -z "$IS_EXISTING_IN_PREV" ]; then
                          NEW_ADDRESSES_FOR_NETWORK+="- $CURRENT_ADDR\n" # Add to the list for this network
                          FOUND_ANY_NEW_ADDRESSES=true # Set global flag
                      fi
                  done
              fi

              # If new addresses were found for the current network, echo them in a collapsible group.
              if [ -n "$NEW_ADDRESSES_FOR_NETWORK" ]; then
                  echo "::group::New implementation addresses found for $NETWORK"
                  echo -e "$NEW_ADDRESSES_FOR_NETWORK" # -e interprets newline characters (\n)
                  echo "::endgroup::"
              fi
          done

          # Final message if no new addresses were found at all.
          if [ "$FOUND_ANY_NEW_ADDRESSES" == "false" ]; then
              echo "No new implementation addresses were detected in state.json."
          fi

          # Clean up the temporary file created for the previous state.json content.
          rm prev_state.json