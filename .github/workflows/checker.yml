# This workflow deploys a contract using a TypeScript script.
# It is triggered manually via the GitHub Actions UI.

name: 'Manual Contract Deployment'

on:
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      address:
        description: 'The deployer address to check for ETH balance'
        required: true
        type: string
      rpcUrl:
        description: 'RPC URL of the target Ethereum network'
        required: true
        type: string
      weth09Address:
        description: 'WETH09 Contract Address for the deployment'
        required: true
        type: string
      nativeSymbol:
        description: 'Native currency symbol (e.g., ETH, MATIC)'
        required: true
        type: string

jobs:
  run-deployment-script:
    runs-on: ubuntu-latest
    
    steps:
      # 1. Check out your repository code
      - name: Checkout Repository
        uses: actions/checkout@v4

      # 2. Set up a specific version of Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm' # Cache npm packages for faster subsequent runs

      # 3. Install necessary dependencies
      # Assumes you have a package.json. If not, use: npm install ethers typescript ts-node
      - name: Install Dependencies
        run: npm install

      # 4. Create a temporary runner script to execute the deployment function
      # This approach avoids modifying your source files just to pass arguments.
      - name: Create Runner Script
        run: |
          cat <<EOF > ./runner.ts
          // This is a temporary script generated by the GitHub Actions workflow
          // to call the deployContract function with the provided inputs.
          import { deployContract } from './scripts/deploy';

          // Get inputs from environment variables set in the workflow
          const address = process.env.INPUT_ADDRESS!;
          const rpcUrl = process.env.INPUT_RPCURL!;
          const weth09Address = process.env.INPUT_WETH09ADDRESS!;
          const nativeSymbol = process.env.INPUT_NATIVESYMBOL!;

          console.log('--- Starting Deployment Script ---');
          console.log('Deployer Address:', address);
          console.log('RPC URL:', rpcUrl.replace(/\/[^/]+$/, '/****')); // Hide potential API keys in logs

          // Execute the main deployment function
          deployContract(address, rpcUrl, weth09Address, nativeSymbol).catch(err => {
              console.error("Script execution failed:", err);
              process.exit(1); // Exit with a non-zero code to fail the workflow step
          });
          EOF

      # 5. Run the TypeScript script using ts-node
      # The inputs are passed securely as environment variables.
      - name: Execute Deployment Script
        run: npx ts-node ./runner.ts
        env:
          INPUT_ADDRESS: ${{ github.event.inputs.address }}
          INPUT_RPCURL: ${{ github.event.inputs.rpcUrl }}
          INPUT_WETH09ADDRESS: ${{ github.event.inputs.weth09Address }}
          INPUT_NATIVESYMBOL: ${{ github.event.inputs.nativeSymbol }}